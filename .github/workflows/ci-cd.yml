name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - '**.ts'
      - '**.js'
      - '**.yml'
      - Dockerfile
      - docker-compose.yml

jobs:
  build-and-test:
    name: Construire, Tester et Linter
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: ${{ secrets.DB_USERNAME }}
      POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
      POSTGRES_DB: ${{ secrets.DB_DATABASE }}
      MONGO_URI: ${{ secrets.MONGO_URI }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
          POSTGRES_DB: $POSTGRES_DB
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd="echo 'db.runCommand({ping: 1})' | mongo localhost:27017/test --quiet"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Télécharger le code
      uses: actions/checkout@v3

    - name: Configurer Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Installer les dépendances
      run: npm install

    - name: Exécuter le linting
      run: npm run lint

    - name: Exécuter les tests
      env:
        DATABASE_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB
        MONGO_URI: $MONGO_URI
      run: npm run test

  docker-build-and-push:
    name: Construire et Pousser l'image Docker
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Télécharger le code
      uses: actions/checkout@v3

    - name: Se connecter à DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Construire l'image Docker
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/nestchat:latest .

    - name: Pousser l'image Docker
      run: docker push ${{ secrets.DOCKER_USERNAME }}/nestchat:latest

  deploy:
    name: Déployer en production
    runs-on: ubuntu-latest
    needs: docker-build-and-push

    steps:
    - name: Se connecter en SSH et déployer
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        private_key: ${{ secrets.SERVER_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/nestchat:latest
          docker stop nestchat || true
          docker rm nestchat || true
          docker run -d --name nestchat -p 3000:3000 \
            --env POSTGRES_USER=$POSTGRES_USER \
            --env POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
            --env POSTGRES_DB=$POSTGRES_DB \
            --env MONGO_URI=$MONGO_URI \
            ${{ secrets.DOCKER_USERNAME }}/nestchat:latest
