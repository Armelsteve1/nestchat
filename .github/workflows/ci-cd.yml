name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - '**.ts'
      - '**.js'
      - '**.yml'
      - Dockerfile
      - docker-compose.yml

jobs:
  build-and-test:
    name: Build, Test, and Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_DATABASE }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ${{ secrets.DB_USERNAME }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd="echo 'db.runCommand({ping: 1})' | mongo localhost:27017/test --quiet"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: npm install

    - name: Run linting
      run: npm run lint

    - name: Run tests
      env:
        DATABASE_URL: postgres://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@localhost:5432/${{ secrets.DB_DATABASE }}
        MONGO_URI: ${{ secrets.MONGO_URI }}
      run: npm run test

  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/nestchat:latest .

    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/nestchat:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build-and-push

    steps:
    - name: SSH into Server and Deploy
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        private_key: ${{ secrets.SERVER_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/nestchat:latest
          docker stop nestchat || true
          docker rm nestchat || true
          docker run -d --name nestchat -p 3000:3000 \
            --env POSTGRES_USER=${{ secrets.DB_USERNAME }} \
            --env POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --env POSTGRES_DB=${{ secrets.DB_DATABASE }} \
            --env MONGO_URI=${{ secrets.MONGO_URI }} \
            ${{ secrets.DOCKER_USERNAME }}/nestchat:latest
